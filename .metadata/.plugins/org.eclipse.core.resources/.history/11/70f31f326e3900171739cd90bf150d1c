/*  DEVELOPED BY    :                AVINASH AGARWAL  
 *  DATE                        :                15th May, 2017
 *  PLATFORM             :                JAVA 1.6.0_24-b07
 *   PROGRAM             :                The Chess Game
 */

import java.net.Socket;
import java.net.UnknownHostException;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import java.awt.Color;


class AIClient implements Runnable
{
        protected static BufferedReader br;
        protected static PrintWriter pw;
        protected static int myClientNum;
        char myColorFV,opColorFV;
        
        AIClient()
        {
                       
        }
               
        public void run()
        {
                System.out.println(SetUp.HostPort);
                try
                {
                        SetUp.socket = new Socket(SetUp.HostIP, SetUp.HostPort);
                }
                catch(UnknownHostException xx)
                {
                        xx.printStackTrace();
                        return;
                }
                catch(IOException e)
                {
                		e.printStackTrace();
                        return;
                }
                
                try
                {
                        br = new BufferedReader(new InputStreamReader(SetUp.socket.getInputStream()));
                        pw = new PrintWriter(SetUp.socket.getOutputStream(), true);
                }
                catch(IOException e)
                {
                		e.printStackTrace();
                		return;
                }
                SetUp.isClientListening = false;
                
                pw.println("Computer");
                
                Thread z = new Thread(new Listen());
                z.start();               
        }
        
        protected class Listen implements Runnable
        {
                protected String[] nameList;
                private int k;
                public void run()
                {
                         String incoming = ""; 
                         int count = 0;
                         k = 0;
                         String names = "";
                         nameList = new String[100];
                         
                         while(true)
                         {
                                incoming = null;
                                try
                                {
                                        incoming = br.readLine();
                                }
                                catch(IOException e){}
                                
                                if(incoming == null) continue;                                
                                switch(count)
                                {
                                        case 0 : names = incoming;
                                                 break;
                                                       
                                        case 1 : myClientNum = Integer.parseInt(incoming);
                                                       break;
                                                       
                                        case 2 : System.out.println(count);
                                                 if(incoming.equals("SPECTATOR"))
                                                 {
                                                     SetUp.isSpec = true;
                                                     SetUp.myColor = "WHITE";
                                                 }
                                                 else SetUp.myColor = incoming;
                                                 
                                                  /*mw = new MainWin();
                                                  Thread mwit = new Thread(mw);
                                                  mwit.start();
                                                  
                                                  String z = "";
                                                  for (int y = 0; y < names.length(); y++)
                                                  {                                                                
                                                        char c = names.charAt(y);
                                                        if(c != ';')    z += c;                                                       
                                                        else 
                                                        {
                                                              nameList[k] = z;
                                                              SetUp.insertColorStrings(z + "\n", SetUp.colors[k%8], true, mw.tp2);
                                                              z = "";
                                                              k++;
                                                        }
                                                  }
                                                  nameList[k] = SetUp.name;
                                                  SetUp.insertColorStrings(SetUp.name+"\n", SetUp.colors[k%8], true, mw.tp2);
                                                  mw.ctpc = SetUp.colors[k%8];*/
                                                  break;
                                                       
                                        default :      if(incoming.equals(" "))
                                                       {
                                                             /*mw.tp.setText(mw.tp.getText() + "\n<<Host Closed The Room>>");
                                                             mw.tp.setCaretPosition(mw.tp.getDocument().getLength());
                                                             mw.tp.setEnabled(false);
                                                             mw.tp2.setEnabled(false);
                                                             mw.inp.setEnabled(false);*/
                                                                                                                  
                                                             SetUp.hostClosed = true;
                                                       }
                                                       else if(incoming.equals("             YOU WIN"))
                                                       {
                                                             /*SetUp.insertColorStrings("\n" + incoming, Color.GREEN, true, mw.tp);
                                                             mw.tp.setCaretPosition(mw.tp.getDocument().getLength());*/
                                                       }
                                                       else if((incoming.substring(0,2)).equals("  "))
                                                       {
                                                           System.out.println(count);
                                                           System.out.println(incoming);
                                                           int m = Integer.parseInt(""+incoming.charAt(15));
                                                           int n = Integer.parseInt(""+incoming.charAt(17));
                                                           int ix = Integer.parseInt(""+incoming.charAt(19));
                                                           int iy = Integer.parseInt(""+incoming.charAt(21));
                                                           doMoveChanges(m,n,ix,iy);
                                                       }
                                                       
                                                       else if(incoming.charAt(0) == ' ') 
                                                       {
                                                           /*nameList[++k] = incoming.trim();
                                                           SetUp.insertColorStrings(nameList[k]+"\n", SetUp.colors[k%8], true, mw.tp2);
                                                           SetUp.insertColorStrings("\n<<" + nameList[k] + " joined the room>>", SetUp.colors[k%8], true, mw.tp);
                                                           mw.tp.setCaretPosition(mw.tp.getDocument().getLength());*/
                                                       }                         
                                                       
                                }
                                count++;
                         }
                }
                
               protected void doClientLeftChange(String s)
                {
                       /*mw.tp2.setText("");      
                       String z = "";
                       int flag = 0;
                       int x = Integer.parseInt(s);
                       for (int y = 0; y < s.length(); y++)
                                                       {                                                                
                                                                char c = s.charAt(y);
                                                                if(c != ';')    z += c;                                                       
                                                                else 
                                                                {
                                                                        if(flag == 0)
                                                                        {   
                                                                            mw.tp.setText(mw.tp.getText() + "\n<<" + z + " left the room>>");
                                                                            mw.tp.setCaretPosition(mw.tp.getDocument().getLength());
                                                                        }
                                                                        else mw.tp2.setText(mw.tp2.getText() + z + "\n");
                                                                        
                                                                        z = "";
                                                                        flag++;
                                                                }
                       }
                       
                       for(int y = 0; y <= k; y++)
                            if(y != x) SetUp.insertColorStrings(nameList[y] + "\n", SetUp.colors[y%8], true, mw.tp2);
                            
                       SetUp.insertColorStrings("\n<<" + nameList[x] + " left the room>>", SetUp.colors[x%8], true, mw.tp); */
                            
                }
        }
        
        private void doMoveChanges(int m, int n, int x, int y)
        {
                
                //mw.selectedPiece = SetUp.situation[x][y].substring(1,SetUp.situation[x][y].length()-1);
                //char c = SetUp.situation[m][n].charAt(SetUp.situation[m][n].length()-1);
                SetUp.situation[m][n] = SetUp.situation[x][y].substring(0,SetUp.situation[x][y].length()-1) + SetUp.situation[m][n].charAt(SetUp.situation[m][n].length()-1);
                SetUp.situation[x][y] = "" + (SetUp.situation[x][y].charAt(SetUp.situation[x][y].length()-1));
                //mw.paintEnemyMoved(c,m,n,x,y);
                
                
                if(isAttacked(SetUp.situation))
                {
                    //SetUp.insertColorStrings("\nYou are under Check", Color.RED, true, mw.tp);
                   // mw.tp.setCaretPosition(mw.tp.getDocument().getLength());
                    
                    if(mw.isCheckMate(SetUp.situation))
                    {
                        SetUp.insertColorStrings("\nCHECKMATE! YOU LOSE!! ", Color.RED, true, mw.tp);
                        mw.tp.setCaretPosition(mw.tp.getDocument().getLength());   
                        pw.println("             YOU WIN");
                    }
                }
                
                
                SetUp.moveNum++;
        }
        
        protected boolean isAttacked(String config[][])
        {
            int kingX = 0 ,kingY = 0;

            for(int i = 0; i < 8; i++)
                for(int j = 0; j < 8; j++)
                    if(config[i][j].length() > 1 && (config[i][j].substring(0,config[i][j].length() - 1)).equals(myColorFV + "King"))
                    {
                        kingX = i;
                        kingY = j;
            }

            if(kingX == 0 && kingY == 0) return false;

            for(int i = kingX+1; i < 8; i++)
            {
                if(config[i][kingY].length() > 1)
                {
                    if((config[i][kingY].charAt(0) == myColorFV)) break;
                    String pc = (config[i][kingY].substring(1,config[i][kingY].length() - 1));
                    if(pc.equals("Rook") || pc.equals("Queen")) return true;
                    else break;
                }
            }

            for(int i = kingX-1; i >= 0; i--)
            {
                if(config[i][kingY].length() > 1)
                {
                    String pc = (config[i][kingY].substring(1,config[i][kingY].length() - 1));
                    if(config[i][kingY].charAt(0) == myColorFV) break;
                    else if(pc.equals("Rook") || pc.equals("Queen")) return true;
                    else break;
                }
            }

            for(int i = kingY+1; i < 8; i++)
            {

                if(config[kingX][i].length() > 1)
                {
                    String pc = (config[kingX][i].substring(1,config[kingX][i].length() - 1));
                    if(config[kingX][i].charAt(0) == myColorFV) break;
                    else if(pc.equals("Rook") || pc.equals("Queen")) return true;
                    else break;
                }
            }

            for(int i = kingY-1; i >= 0; i--)
            {
                if(config[kingX][i].length() > 1)
                {
                    String pc = (config[kingX][i].substring(1,config[kingX][i].length() - 1));
                    if(config[kingX][i].charAt(0) == myColorFV) break;
                    else if(pc.equals("Rook") || pc.equals("Queen")) return true;
                    else break;
                }
            }

            for(int i = kingX+1, j = kingY + 1; i < 8 && j < 8; i++,j++)
            {
                if(config[i][j].length() > 1)
                {
                    String pc = (config[i][j].substring(1,config[i][j].length() - 1));
                    if(config[i][j].charAt(0) == myColorFV) break;
                    else if(pc.equals("Queen") || pc.equals("Bishop")) return true;
                    else break;
                }
            }

            for(int i = kingX+1, j = kingY - 1; i < 8 && j >= 0; i++,j--)
            {
                if(config[i][j].length() > 1)
                {
                    String pc = (config[i][j].substring(1,config[i][j].length() - 1));
                    if(config[i][j].charAt(0) == myColorFV) break;
                    else if(pc.equals("Queen") || pc.equals("Bishop")) return true;
                    else break;
                }
            }

            for(int i = kingX-1, j = kingY + 1; i >= 0 && j < 8; i--,j++)
            {
                if(config[i][j].length() > 1)
                {
                    String pc = (config[i][j].substring(1,config[i][j].length() - 1));
                    if(config[i][j].charAt(0) == myColorFV) break;
                    else if(pc.equals("Queen") || pc.equals("Bishop")) return true;
                    else break;
                }
            }

            for(int i = kingX-1, j = kingY - 1; i >=0 && j >= 0; i--,j--)
            {
                if(config[i][j].length() > 1)
                {
                    String pc = (config[i][j].substring(1,config[i][j].length() - 1));
                    if(config[i][j].charAt(0) == myColorFV) break;
                    else if(pc.equals("Queen") || pc.equals("Bishop")) return true;
                    else break;
                }
            }

            if(kingY > 0)
            {
                if(kingX > 0)
                    if((config[kingX-1][kingY-1].length() > 1) && ((config[kingX-1][kingY-1].substring(0,config[kingX-1][kingY-1].length()-1)).equals(opColorFV + "Pawn")))
                        return true;
                if(kingX < 7)
                    if((config[kingX+1][kingY-1].length() > 1) && ((config[kingX+1][kingY-1].substring(0,config[kingX+1][kingY-1].length()-1)).equals(opColorFV + "Pawn")))
                        return true;
            }       

            
            if(((kingX > 1 && kingY > 0) && (config[kingX-2][kingY-1].length() > 1) && ((config[kingX-2][kingY-1].substring(0,config[kingX-2][kingY-1].length()-1)).equals(opColorFV + "Knight"))) || 
            ((kingX > 0 && kingY > 1) && (config[kingX-1][kingY-2].length() > 1) && ((config[kingX-1][kingY-2].substring(0,config[kingX-1][kingY-2].length()-1)).equals(opColorFV + "Knight"))) ||
            ((kingX < 7 && kingY > 1) && (config[kingX+1][kingY-2].length() > 1) && ((config[kingX+1][kingY-2].substring(0,config[kingX+1][kingY-2].length()-1)).equals(opColorFV + "Knight"))) ||
            ((kingX < 6 && kingY > 0) && (config[kingX+2][kingY-1].length() > 1) && ((config[kingX+2][kingY-1].substring(0,config[kingX+2][kingY-1].length()-1)).equals(opColorFV + "Knight"))) ||
            ((kingX > 1 && kingY < 7) && (config[kingX-2][kingY+1].length() > 1) && ((config[kingX-2][kingY+1].substring(0,config[kingX-2][kingY+1].length()-1)).equals(opColorFV + "Knight"))) ||
            ((kingX > 0 && kingY < 6) && (config[kingX-1][kingY+2].length() > 1) && ((config[kingX-1][kingY+2].substring(0,config[kingX-1][kingY+2].length()-1)).equals(opColorFV + "Knight"))) ||
            ((kingX < 7 && kingY < 6) && (config[kingX+1][kingY+2].length() > 1) && ((config[kingX+1][kingY+2].substring(0,config[kingX+1][kingY+2].length()-1)).equals(opColorFV + "Knight"))) ||
            ((kingX < 6 && kingY < 7) && (config[kingX+2][kingY+1].length() > 1) && ((config[kingX+2][kingY+1].substring(0,config[kingX+2][kingY+1].length()-1)).equals(opColorFV + "Knight"))))
                return true;

                
            if(((kingX > 0) && (config[kingX-1][kingY].length() > 1) && ((config[kingX-1][kingY].substring(0,config[kingX-1][kingY].length()-1)).equals(opColorFV + "King"))) || 
            ((kingX > 0 && kingY > 0) &&(config[kingX-1][kingY-1].length() > 1) && ((config[kingX-1][kingY-1].substring(0,config[kingX-1][kingY-1].length()-1)).equals(opColorFV + "King"))) ||
            ((kingY > 0) &&(config[kingX][kingY-1].length() > 1) && ((config[kingX][kingY-1].substring(0,config[kingX][kingY-1].length()-1)).equals(opColorFV + "King"))) ||
            ((kingX < 7 && kingY > 0) &&(config[kingX+1][kingY-1].length() > 1) && ((config[kingX+1][kingY-1].substring(0,config[kingX+1][kingY-1].length()-1)).equals(opColorFV + "King"))) ||
            ((kingX < 7) &&(config[kingX+1][kingY].length() > 1) && ((config[kingX+1][kingY].substring(0,config[kingX+1][kingY].length()-1)).equals(opColorFV + "King"))) ||
            ((kingX < 7 && kingY < 7) &&(config[kingX+1][kingY+1].length() > 1) && ((config[kingX+1][kingY+1].substring(0,config[kingX+1][kingY+1].length()-1)).equals(opColorFV + "King"))) ||
            ((kingY < 7) &&(config[kingX][kingY+1].length() > 1) && ((config[kingX][kingY+1].substring(0,config[kingX][kingY+1].length()-1)).equals(opColorFV + "King"))) ||
            ((kingX > 0 && kingY < 7) &&(config[kingX-1][kingY+1].length() > 1) && ((config[kingX-1][kingY+1].substring(0,config[kingX-1][kingY+1].length()-1)).equals(opColorFV + "King"))))
                return true;

            return false;
        }
        
}